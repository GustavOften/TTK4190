% EXTERNAL_MATRICES compute WAMIT input files and checks the load condition
% The *.frc file containing the external matrices is autogenerated. To run
% this file you need to call WAMIT which again requires a dongle.
%
% When the load condition parameters are OK, run WWAMIT again for all frequencies: 
%
%      dos('c:\wamitv63\wamit.exe &');
%
% Author: Thor I. Fossen

clear all

% Platform (cylindrical)		
% Dypgang               100	m
% diameter              10	m
% volume                7853.981634	m^3
% displacement          8050.331175	t
% total weight          7200	t
% oppdrift              153.3311748	t
% vertical anchor force	1504.178825	kN
% total CG vertical     -80	m
% CB vertical           -50	m
% Water plane inertia	491	
% BM                    0.062516062	
% Metacenter            -49.93748394	
% GM                    30.06251606	
% 		
% Ankerkrefter		
% C11, C22              50	kN/m
% C33                   10	kN/m
% C44, C55 ~            0	
% C66                   stor		Kn/rad
% plassering ankerfeste	-60	m
% 		
% Naturlige perioder		
% surge                 120-130	s
% pitch/heave           30-35	s

% Roll data to be iterated, compute an estimate by using:
B44v     = 2.0e9;  % change this value until you have the correct viscous damping
T_roll   = 41;   % iterate to match WAMIT data
T_pitch  = 41;   % iterate to match WAMIT data

% WAMIT geometry file
file = 'cylinder.gdf';
ILOWHI = 1;
wamit_path = 'USERID_PATH=c:\WAMITv64';

% constants
rho = 1025;
g   = 9.80665;

% vessel data
R = 5;
T_draught = 100;

V = (pi*R^2)*T_draught;
m = rho*V;   % change this value until you have correct mass
R44 = sqrt(9*R^2+12*T_draught^2)/6;    % in CG
R55 = sqrt(9*R^2+12*T_draught^2)/6;
R44  = sqrt((R44^2 + 80^2));    % in CO
R55  = sqrt((R55^2 + 80^2));
R66 = R*sqrt(2)/2;

FSC = 0;   
LCG  = 0;
VCG  = 20;          % VCG = KG (tune to obtain GM with FSC)

% Include effect of anchor forces
T_surge        = 112;   
T_sway         = 112;
T_heave        = 32;
T_yaw          = 100;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DO NOT EDIT BELOW THIS LINE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fclose all;
warning off; 
mkdir('init_wamit'); 
copyfile(file,'init_wamit\init.gdf');
cd('init_wamit')
delete init.p2f;
delete init.out;
warning on;

% ----------------------------------------------------
% CREATE fnames.wam
% ----------------------------------------------------
fid1 = fopen('fnames.wam','w');
fprintf(fid1,'%s\n','init.cfg');
fprintf(fid1,'%s\n','init.pot');
fprintf(fid1,'%s\n','init.frc');
fprintf(fid1,'%s','init.gdf');
fclose(fid1);

% ----------------------------------------------------
% CREATE init.frc
% ----------------------------------------------------
xg = 0;
yg = 0;
zg = VCG-T_draught;

fid2 = fopen('init.frc','w');
fprintf(fid2,'%s\n','Init file');
fprintf(fid2,'%s\n','1 0 0 0 0 0 0 0 0');
fprintf(fid2,'%0.2f\n',rho);
fprintf(fid2,'%0.2f %0.2f %0.2f\n',xg,yg,zg);
fprintf(fid2,'%s\n','1');   % IMASS
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',m,0.0,0.0,0.0,m*zg,-m*yg);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',0,m,0,-m*zg,0,m*xg);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',0,0,m,m*yg,-m*xg,0);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',0,-m*zg,m*yg,m*R44*R44,0,0);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',m*zg,0,-m*xg,0,m*R55*R55,0);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',-m*yg,m*xg,0,0,0,m*R66*R66);
fprintf(fid2,'%s\n','0');     % IDAMP
fprintf(fid2,'%s\n','0');     % ISTIF
fprintf(fid2,'%s\n','0');     % NBETAH
fprintf(fid2,'%s','0');       % NFIELD
fclose(fid2);

% ----------------------------------------------------
% CREATE init.pot
% ----------------------------------------------------
fid3 = fopen('init.pot','w');
fprintf(fid3,'%s\n','Init file');
fprintf(fid3,'%1.0f \n',0);  % ISOR
fprintf(fid3,'%1.0f \n',0);  % IRR
fprintf(fid3,'%1.0f %0.2f %0.2f %0.2f %0.2f\n',-1,0,0,0,0);
fprintf(fid3,'%1.0f %1.0f %1.0f\n',0,0,0);  % IQUAD ILOG IDIAG
fprintf(fid3,'%1.0f %1.0f\n',1,0);          % IRAD IDIFF
fprintf(fid3,'%1.0f %1.0f %1.0f %1.0f %1.0f %1.0f\n',1,1,1,1,1,1);
fprintf(fid3,'%1.0f\n',2);  % NPER
fprintf(fid3,'%s\n',sprintf('%2.1f ',[-1 T_roll]));
fprintf(fid3,'%1.0f\n',1); % NBETA
fprintf(fid3,'%1.0f',0);
fclose(fid3);

% ----------------------------------------------------
% CREATE init.cfg
% ----------------------------------------------------
fid4 = fopen('init.cfg','w');
fprintf(fid4,'%s\n','IPLTDAT=5');
fprintf(fid4,'%s\n','ILOWGDF=5');
fprintf(fid4,'%s\n','KSPLIN=3');
fprintf(fid4,'%s\n','IQUADI=4');
fprintf(fid4,'%s\n','IQUADO=3');
fprintf(fid4,'%s\n','MAXITT=100');
fprintf(fid4,'%s\n','IALTFRC=2');
fprintf(fid4,'%s\n','IALTPOT=1');
fprintf(fid4,'%s%1.0f\n','ISOLVE=',1); %ISOLVE
fprintf(fid4,'%s%1.0f\n','MAXSCR=',1024);
fprintf(fid4,'%s%1.0f\n','ILOWHI=',ILOWHI);   % ILOWHI
fprintf(fid4,'%s\n','IPERIO=1');
fprintf(fid4,'%s',wamit_path);
fclose(fid4);

% ----------------------------------------------------
% run WAMIT
% ----------------------------------------------------
disp('                                              ')
disp('WAMIT is running in the CMD window...')
dos('c:\wamitv64\wamit.exe input');
disp('                                              ')
disp('Wamit output files generated')
disp('**********************************************')


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% READ WAMIT DATA FROM *.OUT FILE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
T_gdf = [1 -1 -1];             % Wamit2Fossen axes (sign correction)
Tscale = diag([T_gdf T_gdf]);  % 6 DOF transformation matrix for A and B data

%--------------------------------------------------------------------------
%% Read rigid-body mass parameters from *.frc file
%--------------------------------------------------------------------------
frc = dlmread( 'init.frc','',1,0);

% mass matrix in GLOBAL COORDINATES (Wamit axes)
MRB    = frc(5:10,1:6);             % CO

m   = frc(5,1);
rho = frc(2,1);

% compute gyration radii
k44 = sqrt(MRB(4,4)/m);
k55 = sqrt(MRB(5,5)/m);
k66 = sqrt(MRB(6,6)/m);

%--------------------------------------------------------------------------
%% Read rigid-body mass parameters from *.out file
%--------------------------------------------------------------------------
count = 0;

fid1 = fopen('init.out');

while feof(fid1) == 0,
    count = count + 1;
    txt = char(fgetl(fid1));

    if  strfind(txt,'POTEN run date and starting time:')
        txt = char(fgetl(fid1));
        countstart = count;
    end

    if  strfind(txt,' Gravity:')
        Nfreqs = count - countstart - 2;
        g = str2num(txt(12:25));
    end

    % GDF file length scale
    if  strfind(txt,'Length scale:')
        ULEN = str2num(txt(52:length(txt)));
    end

    if  strfind(txt,'Volumes (VOLX,VOLY,VOLZ):')
        temp = str2num(txt(29:length(txt)));
        nabla = (temp(1)+temp(2)+temp(3))/3;
        mass = rho*nabla;

        disp(' ')
        disp('Processing WAMIT data files....')
        disp(' ')
        disp('--------------- Mass property check (*.frc file)-------------------')
        disp(['Mass computed from displaced fluid is: ' num2str(round(mass/1000)) ' (tonnes)'])
        disp(['Mass input to Wamit *.frc file is    : ' num2str(round(m/1000)) ' (tonnes)'])
        if abs(mass-m)>500e3,
            disp('It is recommended to rerun WAMIT with correct mass parameters')
        end
        disp('-------------------------------------------------------------------')

    end

    if  strfind(txt,' C(3,3),C(3,4),C(3,5):')

        C3 = str2num(txt(23:length(txt)));
        txt = char(fgetl(fid1));
        C4 = str2num(txt(23:length(txt)));
        txt = char(fgetl(fid1));
        C5 = str2num(txt(23:length(txt)));

        % scaling to SI units (Wamit manual p. 4-2)
        rho_g    = rho * g;
        C3 = C3 .* rho_g .* [ULEN^2 ULEN^3 ULEN^3];
        C4 = C4 .* rho_g .* [ULEN^4 ULEN^4 ULEN^4];
        C5 = C5 .* rho_g .* [ULEN^4 ULEN^4];

        % spring stiffness matrix in global coordinates (Wamit axes)
        % Wamit manual p. 4-2
        C_wamit = zeros(6,6);
        C_wamit(3:6,3:6) =...
            [ C3 0
            C3(2) C4
            C3(3) C4(2) C5
            0 0 0 0 ];

        % spring stiffness matrix in CO (Fossen axes)
        C_wamit = Tscale*C_wamit*Tscale;
        for i = 1:Nfreqs,
            C(:,:,i) = C_wamit;
        end

        GM_T  = C_wamit(4,4)/(m*g);
        GM_L  = C_wamit(5,5)/(m*g);

        if GM_T < 0
            disp(['Error: GM_T = ' num2str(GM_T) ' < 0']);
            return
        end
        if GM_L < 0
            disp(['Error: GM_L = ' num2str(GM_L) ' < 0']);
            return
        end

    end

    % CG and CB
    if  strfind(txt,'Center of Buoyancy')
        temp = str2num(txt(33:length(txt)));
        C_B = T_gdf.*temp;   % Fossen axes
        CB = [C_B(1) C_B(2) T_draught-C_B(3)];
    end
    
    if  strfind(txt,'Center of Gravity')
        temp = str2num(txt(33:length(txt)));

        C_G = T_gdf.*temp;   % Fossen axes
        CG = [C_G(1) C_G(2) T_draught-C_G(3)];

    end

end   % End WHILE

fclose(fid1);
      

%--------------------------------------------------------------------------
%% Read added mass and damping from *.1 file
%--------------------------------------------------------------------------
format1 = '%n %n %n %n %n';
[periods,i,j,A,B] = textread('init.1',format1);
Nperiods = length(periods);

unique_periods = unique(periods);

% frequencies (inf is chosen as 10 rad/s)
freqs = [0 2*pi/unique_periods(2)];

% extract added mass and damping
for p = 1:Nperiods,
    idx = find(unique_periods == periods(p));
    Aij(i(p),j(p),idx) = A(p);
    Bij(i(p),j(p),idx) = B(p);
end

% sort with respect to frequency
[freqs_sorted, freq_idx] = sort(freqs);
Aij_sorted = Aij(:,:,freq_idx);
Bij_sorted = Bij(:,:,freq_idx);

freqs   = freqs_sorted;
Nfreqs  = length(freqs);

% Scaling of added mass and damping matrices (Wamit manual p. 4-3)
% Aij = Aij' * rho * ULEN^k
% Bij = Bij' * rho * w * ULEN^k
% where k=3 for i,j=1,2,3, k=5 for i,j=1,2,3, k = 4 otherwise.
scaleA  = [ ones(3)*3 ones(3)*4
            ones(3)*4 ones(3)*5 ];

for w = 1:Nfreqs,
    % scale Wamit data to SI system (Wamit axes)
    A_dim = Aij_sorted (:,:,w)*rho .* (ULEN .^ scaleA);
    B_dim = Bij_sorted (:,:,w)*rho .* freqs(w) ...
        .* (ULEN .^ scaleA);

    % transform to Fossen axes
    Aw(:,:,w) = Tscale*A_dim*Tscale;
    Bw(:,:,w) = Tscale*B_dim*Tscale;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% WAMIT DATA FROM *.OUT FILE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
A0  = Aw(:,:,1);      % A(0) in GLOBAL COORDINATES
A   = Aw(:,:,2);      % A(wp) in GLOBAL COORDINATES
B   = Bw(:,:,2);      % B(wp) in GLOBAL COORDINATES
Ix  = MRB(4,4);            

% viscous roll and pitch damping
w_p = 2*pi/T_roll;
zeta_p = B(4,4)/(2*(Ix+A(4,4))*w_p);
zeta_v = B44v/(2*(Ix+A(4,4))*w_p);
zeta_total = zeta_p + zeta_v;

display(sprintf('B44p = B55p = %5.3g',B(4,4)));
display(sprintf('B44v = B55v = %5.3g',B44v));
display(sprintf('zeta_p      = %5.3f',zeta_p));
display(sprintf('zeta_v      = %5.3f',zeta_v));
display(sprintf('zeta_total  = %5.3f',zeta_total));

% specified
T_heave_specified = T_heave;
T_roll_specified  = T_roll;
T_pitch_specified = T_pitch;

w_surge = 2*pi/T_surge;
w_sway  = 2*pi/T_sway;
w_heave = 2*pi/T_heave;
w_yaw   = 2*pi/T_yaw;

% from WAMIT
M  = MRB + A;
T_heave = 2*pi*sqrt(M(3,3)/C(3,3));
T_roll  = 2*pi*sqrt(M(4,4)/C(4,4));
T_pitch = 2*pi*sqrt(M(5,5)/C(5,5));
GM_T    = C(4,4)/(m*g);

% spring stiffness
G11 = M(1,1)*w_surge^2;
G22 = M(2,2)*w_sway^2;
G33 = 0;
G44 = 0;
G55 = 0;
G66 = M(6,6)*w_yaw^2;

disp(' ')
display(sprintf('GM_T              = %5.2f (m)',C(4,4)/(m*g)));
display(sprintf('T_heave_specified = %5.2f (s)',T_heave_specified));
display(sprintf('T_roll_specified  = %5.2f (s)',T_roll_specified));
display(sprintf('T_pitch_specified = %5.2f (s)',T_pitch_specified));
disp(' ');
display(sprintf('T_heave_wamit     = %5.2f (s)',T_heave));
display(sprintf('T_roll_wamit      = %5.2f (s)',T_roll));
display(sprintf('T_pitch_wamit     = %5.2f (s)',T_pitch));
display(' ')

format long g

disp('-------------------------------------------------------------------')

% MRB in GLOBAL COORDINATES (WAMIT axes)
MRB = sprintf('%1.2f %1.2f %1.2f %1.2f %1.2f %6.2f\n',MRB)

% external damping
DD = diag(diag(M).*[0 0 0 2*zeta_v*w_p 2*zeta_v*w_p 0]');
D = sprintf('%1.2f %1.2f %1.2f %1.2f %1.2f %6.2f\n',DD)

% external spring (P-controller)
GG = diag([G11 G22 G33 G44 G55 G66]');
G = sprintf('%1.2f %1.2f %1.2f %1.2f %1.2f %6.2f\n',GG)

format short

% return to main catalogue
cd('..')

% ----------------------------------------------------
% CREATE vessel.frc
% ----------------------------------------------------
fid2 = fopen([file(1:length(file)-4) '.frc'],'w');
fprintf(fid2,'%s\n','FRC file #2');
fprintf(fid2,'%s\n','1 0 1 1 0 0 0 0 1');
fprintf(fid2,'%0.2f\n',rho);
fprintf(fid2,'%0.2f %0.2f %0.2f\n',xg,yg,zg);
fprintf(fid2,'%s\n','1');   % IMASS
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',m,0.0,0.0,0.0,m*zg,-m*yg);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',0.0,m,0.0,-m*zg,0.0,m*xg);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',0.0,0.0,m,m*yg,-m*xg,0.0);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',0.0,-m*zg,m*yg,m*R44*R44,0.0,0.0);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',m*zg,0.0,-m*xg,0.0,m*R55*R55,0.0);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',-m*yg,m*xg,0.0,0.0,0.0,m*R66*R66);
fprintf(fid2,'%s\n','1');     % IDAMP
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',DD(1,1),0.0,0.0,0.0,0.0,0.0);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',0.0,DD(2,2),0.0,0.0,0.0,0.0);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',0.0,0.0,0.0,0.0,0.0,0.0);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',0.0,0.0,0.0,DD(4,4),0.0,0.0);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',0.0,0.0,0.0,0.0,0.0,0.0);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',0.0,0.0,0.0,0.0,0.0,DD(6,6));
fprintf(fid2,'%s\n','1');     % ISTIF
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',GG(1,1),0.0,0.0,0.0,0.0,0.0);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',0.0,GG(2,2),0.0,0.0,0.0,0.0);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',0.0,0.0,0.0,0.0,0.0,0.0);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',0.0,0.0,0.0,0.0,0.0,0.0);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',0.0,0.0,0.0,0.0,0.0,0.0);
fprintf(fid2,'%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f\n',0.0,0.0,0.0,0.0,0.0,GG(6,6));
fprintf(fid2,'%s\n','0');     % NBETAH
fprintf(fid2,'%s','0');       % NFIELD
fclose(fid2);

disp(' ')
disp(['WAMIT data for external MRB, D and G are written to: ' file(1:length(file)-4) '.frc']);
disp(' ')


